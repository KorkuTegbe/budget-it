openapi: 3.0.0
info:
   title: Oyin's Budget It API Docs
   version: 1.0.0
   description: Endpoints documentation for the Budget It API 
paths:
   /auth/signup:
      post:
         summary: 'Endpoint for user to sign up'
         tags:
            - auth
         operationId: SignupRequest
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/SignupRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/SignUpResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /auth/login:
      post:
         summary: 'Endpoint for user to log in'
         tags:
            - auth
         operationId: LoginRequest
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/LoginRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/SignUpResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /user/username:
      patch:
         summary: 'Endpoint for user to change their username'
         tags:
            - user
         operationId: UsernameChangeRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/UsernameChangeRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /user/password:
      patch:
         summary: 'Endpoint for user to change their password'
         tags:
            - user
         operationId: PasswordChangeRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/PasswordChangeRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /user/pin:
      patch:
         summary: 'Endpoint for user to change their pin'
         tags:
            - user
         operationId: PinChangeRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/PinChangeRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /user:
      get:
         summary: 'Endpoint to fetch user details'
         tags:
            - user
         operationId: GetUserDetailsRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/UserDetailsResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /savings:
      get:
         summary: 'Endpoint to get savings balance'
         tags:
            - savings
         operationId: 'GetSavingsBalance'
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/SavingsBalanceResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/BadRequestResponse'
      
   /savings/{savingId}:
      post:
         summary: 'Endpoint to top up savings balance'
         tags:
            - savings
         operationId: 'TopUpSavingsRequest'
         parameters: 
            - $ref: '#/components/parameters/AuthToken'
            - $ref: '#/components/parameters/SavingId'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/TopUpRequest'
            required: true
            
         responses: 
            '200':
               description: 'success'
               content:
                  application/json:
                     $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     $ref: '#/components/schemas/BadRequestResponse'
      
      # patch:
      #    summary: 'Endpoint to publish a blog post'
      #    tags: 
      #       - blog
      #    operationId: 'PublishBlogRequest'
      #    parameters:
      #       - $ref: '#/components/parameters/AuthToken'
      #       - $ref: '#/components/parameters/BlogId'
      #    responses: 
      #       '200':
      #          description: 'success'
      #          content: 
      #             application/json:
      #                schema: 
      #                   $ref: '#/components/schemas/DefaultResponse'
      #       '400': 
      #          description: 'error'
      #          content:
      #             application/json:
      #                schema:
      #                   $ref: '#/components/schemas/BadRequestResponse'
       
   # /savings/user:
   #    get:
   #       summary: 'Endpoint to get users blog posts'
   #       tags:
   #          - blog
   #       operationId: 'GetUsersBlogPosts'
   #       parameters:
   #          - $ref: '#/components/parameters/AuthToken'
   #          - $ref: '#/components/parameters/Page'
   #          - $ref: '#/components/parameters/Limit'
   #          - $ref: '#/components/parameters/Sort'
   #          - $ref: '#/components/parameters/Fields'
   #          - $ref: '#/components/parameters/Search'
   #       responses:
   #          '200':
   #             description: 'success'
   #             content:
   #                application/json:
   #                   schema:
   #                      $ref: '#/components/schemas/Pagination'
   #          '400':
   #             description: 'error'
   #             content:
   #                application/json:
   #                   schema:
   #                      $ref: '#/components/schemas/BadRequestError'

   /budgets:
      post:
         summary: 'Endpoint to create a budget'
         tags:
            - budgets
         operationId: 'CreateBudgetRequest'
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/CreateBudgetRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/BadRequestResponse'
      get:
         summary: "Endpoint to get a user's budgets"
         tags:
            - budgets
         operationId: "GetUserBudgets"
         parameters:
            - $ref: "#/components/parameters/AuthToken"
            - $ref: "#/components/parameters/Page"
            - $ref: "#/components/parameters/Sort"
            - $ref: "#/components/parameters/Limit"
            - $ref: "#/components/parameters/Fields"
            - $ref: "#/components/parameters/Search"
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Pagination'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/BadRequestResponse'

   /budgets/{budgetId}:
      get:
         summary: 'Endpoint to transfer funds from budget to another user'
         tags:
            - budgets
         operationId: GetBudgetRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
            - $ref: '#/components/parameters/BudgetId'
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/GetBudgetResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /budgets/{budgetId}/transfer:
      post:
         summary: 'Endpoint to transfer funds to a user by username'
         tags:
            - budgets
         operationId: TransferFundsToUsername
         parameters:
            - $ref: '#/components/parameters/AuthToken'
            - $ref: '#/components/parameters/BudgetId'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/TransferToUsernameRequest' #got here
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/UserDetailsResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

   /spending:
      post:
         summary: 'Endpoint to make a transaction'
         tags:
            - transactions
         operationId: 'CreateSpendingRequest'
         parameters:
            - $ref: '#/components/parameters/AuthToken'
         requestBody:
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/CreateSpendingRequest'
            required: true
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/DefaultResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/BadRequestResponse'
      get:
         summary: "Endpoint to get a user's transaction history"
         tags:
            - transactions
         operationId: "GetUserTransactions"
         parameters:
            - $ref: "#/components/parameters/AuthToken"
            - $ref: "#/components/parameters/Page"
            - $ref: "#/components/parameters/Sort"
            - $ref: "#/components/parameters/Limit"
            - $ref: "#/components/parameters/Fields"
            - $ref: "#/components/parameters/Search"
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Pagination'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/BadRequestResponse'

   /spending/{spendingId}:
      get:
         summary: 'Endpoint to get transaction details of a single spend'
         tags:
            - transactions
         operationId: GetSpendingRequest
         parameters:
            - $ref: '#/components/parameters/AuthToken'
            - $ref: '#/components/parameters/SpendingId'
         responses:
            '200':
               description: 'success'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/GetSpendingResponse'
            '400':
               description: 'error'
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'

components:
   parameters:
      UserId:
         name: 'userId'
         in: path
         schema:
            type: string
            format: uuid
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
         required: true

      AuthToken:
         name: x-auth-token
         in: header
         schema:
            type: string
         required: true

      Page:
         name: page
         in: query
         schema:
         type: number
         minimum: 1
         default: 1
         required: false

      Limit:
         name: limit
         description: This is the total number of elements returned
         in: query
         schema:
         type: number
         default: 20
         minimum: 1
         maximum: 30
         required: false

      Search:
         name: search
         description: search query for searching of documents.
         in: query
         schema:
         type: string
         maxLength: 100
         minLength: 1
         required: false

      Sort:
         name: sort
         description: sort filter for sorting documents returned,e.g name ,createdAt, updatedAt etc.,
         in: query
         schema:
         type: string
         maxLength: 100
         minLength: 1
         required: false

      Fields:
         name: fields
         description: Filter to select useful fields
         in: query
         schema:
         type: string
         maxLength: 100
         minLength: 1
         required: false

      SavingId:
         name: "savingId"
         in: path
         schema:
            type: string
            format: uuid
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
         required: true

      BudgetId:
         name: "budgetId"
         in: path
         schema:
            type: string
            format: uuid
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
         required: true

      SpendingId:
         name: "spendingId"
         in: path
         schema:
            type: string
            format: uuid
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
         required: true

   responses:
   
   schemas:
      SignupRequest:
         additionalProperties: false
         title: SignupRequest
         example:
            {
               "firstName": "King",
               "lastName": "Paluta",
               "phoneNumber": "08005444245",
               "email": "paluta@gmail.com",
               "password": "KorkuIs1",
               "pin": 4321
            }
         type: object
         properties:
            firstName:
               type: string
            lastName: 
               type: string
            password:
               type: string
            email:
               type: string
            phoneNumber:
               type: string
            pin: 
               type: number
            required:
               - firstName
               - lastName
               - email
               - password
               - phoneNumber
               - pin

      LoginRequest:
         additionalProperties: false
         title: LoginRequest
         example: { accountNumber: '8005444245', password: '1234abcd' }
         type: object
         properties:
            password:
               type: string
            email:
               type: string
            required:
               - password
               - email

      TokenResponse:
         type: object
         properties:
            token:
               type: string

      DefaultResponse:
         title: DefaultResponse
         type: object
         properties:
            success:
               type: string
            message:
               type: string
            status:
               type: number
         example:
            { success: 'true', message: 'operation successful', status: 200 }

      AuthResponse:
         title: AuthResponse
         type: object
         properties:
            success:
               type: string
            message:
               type: string
            status:
               type: number
            accessToken:
               type: string
         example:
            {
               success: 'true',
               message: 'operation successful',
               status: 200,
               accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImttYW5AZ21haWwuY29tIiwidHlwZSI6Ik5FVyBVU0VSIiwiaWF0IjoxNzE5NDYxNjM0LCJleHAiOjE3MTk0NjUyMzR9.DX9BlJpy2p8s5dOe1XESaZPqqu4fv7nCio8Qxex5YiM',
            }

      ErrorResponse:
         title: DefaultResponse
         type: object
         properties:
            error:
               type: string
            message:
               type: string
         required:
            - message
         example: { 'message': 'Error' }

      NotFoundResponse:
         type: object
         properties:
         message:
            type: string
         example: { 'message': 'No resource found' }

      BadRequestResponse:
         type: object
         properties:
            message:
               type: string
            status: 
               type: number
            success: 
               type: boolean
            example: { success: 'true', message: 'BadErrorRequest', status: 200 }

      SavingsBalanceResponse:
         type: object
         properties:
            status: 
               type: number
            success:
               type: string
            message:
               type: string
            data:
               type: object
         example:
            {
               "status": 200,
               "success": true,
               "message": "Savings balance fetched successfully",
               "data": [
                  {
                     "amount": 2000,
                     "id": "afd3ad7c-32b8-4273-87b6-7e23886d4d5b"
                  }
               ]
            }

      TopUpRequest:
         type: object
         properties:
            amount: 
               type: string
         example: {
            "amount": 2500
         }

      Pagination:
         type: object
         example:
            {
               'page': 1,
               'size': 50,
               'lastPage': 5,
               'totalCount': 241,
               'data': [],
            }
         properties:
            page:
               type: integer
            size:
               type: integer
            lastPage:
               type: integer
            totalCount:
               type: integer

      SignUpResponse:
         title: AuthResponse
         type: object
         properties:
            success:
               type: string
            message:
               type: string
            status:
               type: number
            data:
               type: object
         example:
            {
               success: 'true',
               message: 'operation successful',
               status: 200,
               data: {
                     "user": {
                        "accountNumber": "8005444245",
                        "username": "kingpaluta_7195"
                     },
                     accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImttYW5AZ21haWwuY29tIiwidHlwZSI6Ik5FVyBVU0VSIiwiaWF0IjoxNzE5NDYxNjM0LCJleHAiOjE3MTk0NjUyMzR9.DX9BlJpy2p8s5dOe1XESaZPqqu4fv7nCio8Qxex5YiM'
                  },
               }
            
      UsernameChangeRequest:
         additionalProperties: false
         title: UsernameChangeRequest
         example: { username: "the_king_paluta", pin: "4321" }
         type: object
         properties:
            username:
               type: string
            pin:
               type: string
            required:
               - username
               - pin

      PasswordChangeRequest:
         additionalProperties: false
         title: PasswordChangeRequest
         example: { oldPassword: "KorkuIs1", newPassword: "@DaBadest1", pin: "4321" }
         type: object
         properties:
            oldPassword:
               type: string
            newPassword:
               type: string
            pin: 
               type: string
            required:
               - oldPassword
               - newPassword
               - pin

      PinChangeRequest:
         additionalProperties: false
         title: PinChangeRequest
         example: { oldPin: "4321", newPin: "1234" }
         type: object
         properties:
            oldPin:
               type: string
            newPin:
               type: string
            required:
               - oldPin
               - newPin
            
      UserDetailsResponse:
         type: object
         properties:
            status: 
               type: number
            success:
               type: string
            message:
               type: string
            data:
               type: object
         example:
            {
               "status": 200,
               "success": true,
               "message": "User details fetched successfully",
               "data": {
                  "user": {
                        "firstName": "King",
                        "lastName": "Paluta",
                        "phoneNumber": "08005444245",
                        "username": "the_king_paluta",
                        "accountNumber": "8005444245",
                        "email": "paluta@gmail.com",
                        "id": "cb879031-252e-4b50-93b1-a07b8a123de1"
                  }
               }
            }
               
      GetBudgetResponse: 
         type: object
         properties:
            status: 
               type: number
            success:
               type: string
            message:
               type: string
            data:
               type: object
         example:
            {
               "status": 200,
               "success": true,
               "message": "Budgets fetched successful",
               "data": {
                  "name": "New year's budget",
                  "description": "this be my budget for the new year",
                  "amount": 2000,
                  "type": "CELEBRATION",
                  "user": "e39cf062-8bf3-41ac-bed6-0e85c28b37b0",
                  "createdAt": "2024-12-09T23:33:10.969Z",
                  "updatedAt": "2024-12-09T23:33:10.969Z",
                  "id": "6e38f290-6ea9-4592-9cd2-30c1e8ad8433"
               }
            }

      CreateBudgetRequest:
         additionalProperties: false
         title: CreateBudgetRequest
         example: { amount: '2000', category: 'MONTHLY', frequency: '3', pin: "1234" }
         type: object
         properties:
            amount:
               type: string
            category:
               type: string
            frequency: 
               type: string
            pin:
               type: string
            required:
               - amount
               - category
               - frequency
               - pin

      TransferToUsernameRequest:
         title: TransferToUsernameRequest
         example: { amount: 200, username: 'the_king_paluta', pin: '4321'}
         type: object
         properties:    
            amount:
               type: number
            username: 
               type: string
            pin: 
               type: string
            required:
               - username
               - amount
               - pin

      CreateSpendingRequest:
         additionalProperties: false
         title: CreateBudgetRequest
         example: { amount: '2000', category: 'BILLS', description: 'Data purchase', budgetId: 'b40bab69-1e4a-46f8-950a-d22f47801375', pin: "1234" }
         type: object
         properties:
            amount:
               type: string
            category:
               type: string
            description: 
               type: string
            budgetId: 
               type: string
            pin:
               type: string
            required:
               - amount
               - category
               - pin
               - budgetId

      GetSpendingResponse: 
         type: object
         properties:
            status: 
               type: number
            success:
               type: string
            message:
               type: string
            data:
               type: object
         example:
            {
               "status": 200,
               "success": true,
               "message": "Budget fetched successfully",
               "data": {
                  "category": "FOOD",
                  "description": "Bolt food order",
                  "amount": 150,
                  "sourceBudget": "b40bab69-1e4a-46f8-950a-d22f47801375",
                  "user": "298d7a1c-ce15-4bcc-a63e-8135df37b69a",
                  "createdAt": "2025-02-10T00:09:15.872Z",
                  "updatedAt": "2025-02-10T00:09:15.872Z",
                  "id": "ee5bd0a5-4143-4513-ac3f-5cc2833a8bd5"
               }
            }